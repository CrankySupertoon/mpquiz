[
    {
        "id": "a4c1dacb.0aa0d8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "46622bfc.eed084",
        "type": "subflow",
        "name": "sessionId split to socketIds",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 80,
                "wires": [
                    {
                        "id": "421b4a98.4596b4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 80,
                "wires": [
                    {
                        "id": "268ca40d.28d06c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "63ebb2fb.c780bc",
        "type": "uibuilder",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "url": "quiz",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "showfolder": false,
        "x": 670,
        "y": 340,
        "wires": [
            [
                "28fdd81c.135de8"
            ],
            [
                "2c470152.92e29e"
            ]
        ]
    },
    {
        "id": "28fdd81c.135de8",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Update sessions",
        "func": "const sessions = global.get('sessions') || {}\n\nconst sessionId = msg.sessionId\nconst socketId = msg._socketId\n\nconst session = sessions[sessionId] || {socketIds: []}\n\n\nif (!session.socketIds.includes(socketId)) {\n    session.socketIds.push(socketId)\n    sessions[sessionId] = session\n    global.set('sessions', sessions)\n}\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 280,
        "wires": [
            [
                "61caa82f.ea5278",
                "77c54779.bc6258"
            ]
        ]
    },
    {
        "id": "2c470152.92e29e",
        "type": "switch",
        "z": "a4c1dacb.0aa0d8",
        "name": "client disconnect",
        "property": "uibuilderCtrl",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "client disconnect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 870,
        "y": 420,
        "wires": [
            [
                "f4610b3f.13dd48"
            ]
        ]
    },
    {
        "id": "f4610b3f.13dd48",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Remove from sessions",
        "func": "const sessions = global.get('sessions') || {}\n\nconst socketId = msg._socketId\n\nlet dirty = false\n\nfor (const sessionId in sessions) {\n    const session = sessions[sessionId]\n    if (session.socketIds.includes(socketId)) {\n        dirty = true\n        session.socketIds = session.socketIds.filter(v => v !== socketId)\n        sessions[sessionId] = session\n    }\n}\n\nif (dirty) {\n    global.set('sessions', sessions)\n    msg.payload = `Removed socket \"${socketId} from sessions\"`\n} else {\n    msg.payload = null\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "11fc2c23.10c654"
            ]
        ]
    },
    {
        "id": "11fc2c23.10c654",
        "type": "debug",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "459911ab.41834",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "abfe8019.378a9"
            ]
        ]
    },
    {
        "id": "abfe8019.378a9",
        "type": "change",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "sessions",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "69aa850a.b0664c",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "59EV",
        "payload": "test",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 340,
        "wires": [
            [
                "b4692823.098818"
            ]
        ]
    },
    {
        "id": "71932bab.8a6204",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "W7WK",
        "payload": "hello world",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "b4692823.098818"
            ]
        ]
    },
    {
        "id": "421b4a98.4596b4",
        "type": "function",
        "z": "46622bfc.eed084",
        "name": "socketId to socketId/payload pairs",
        "func": "const sessions = global.get('sessions') || {}\nconst sessionId = msg.socketId\nconst session = sessions[sessionId]\nconst pl = {}\n\nfor (const socketId of session.socketIds) {\n    pl[socketId] = msg.payload\n}\nmsg.payload = pl\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "da8ea885.26de48"
            ]
        ]
    },
    {
        "id": "da8ea885.26de48",
        "type": "split",
        "z": "46622bfc.eed084",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "_socketId",
        "x": 930,
        "y": 80,
        "wires": [
            [
                "268ca40d.28d06c"
            ]
        ]
    },
    {
        "id": "268ca40d.28d06c",
        "type": "change",
        "z": "46622bfc.eed084",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "parts",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b4692823.098818",
        "type": "subflow:46622bfc.eed084",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "env": [],
        "x": 400,
        "y": 340,
        "wires": [
            [
                "63ebb2fb.c780bc"
            ]
        ]
    },
    {
        "id": "efd0c09f.0bc63",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Answers array to text/value pairs",
        "func": "msg.payload.prompts = msg.payload.prompts.map((prompt, index) => {\n    return {\n        text: prompt,\n        // value: String.fromCharCode(index + 65) // A == 65, B == 66, etc\n        value: index\n    }\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 580,
        "wires": [
            [
                "a6f69435.67b368"
            ]
        ]
    },
    {
        "id": "a6f69435.67b368",
        "type": "change",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "question",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 580,
        "wires": [
            [
                "48c37a9b.aee8b4",
                "70164c8c.3ebd14"
            ]
        ]
    },
    {
        "id": "a17655e3.5f2ab8",
        "type": "mytimeout",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "outtopic": "",
        "outsafe": "Go!",
        "outwarning": "Hurry up!",
        "outunsafe": "Time's out!",
        "warning": "",
        "timer": "",
        "debug": false,
        "ndebug": false,
        "ignoreCase": false,
        "repeat": false,
        "again": false,
        "x": 1550,
        "y": 860,
        "wires": [
            [
                "6d591598.406c5c"
            ],
            [
                "6480e33c.e56f4c"
            ]
        ]
    },
    {
        "id": "79a62274.61f66c",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1180,
        "y": 860,
        "wires": [
            [
                "4d63487d.74ae38"
            ]
        ]
    },
    {
        "id": "4d63487d.74ae38",
        "type": "template",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "yaml",
        "syntax": "mustache",
        "template": "---\npayload: on\ntimeout: 10\nwarning: 2",
        "output": "yaml",
        "x": 1360,
        "y": 860,
        "wires": [
            [
                "a17655e3.5f2ab8"
            ]
        ]
    },
    {
        "id": "6480e33c.e56f4c",
        "type": "change",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeleft",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 880,
        "wires": [
            [
                "76faccd2.7c2824"
            ]
        ]
    },
    {
        "id": "f0173be7.c781b8",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1350,
        "y": 920,
        "wires": [
            [
                "a17655e3.5f2ab8"
            ]
        ]
    },
    {
        "id": "a3386f73.e3d0d",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1350,
        "y": 960,
        "wires": [
            [
                "a17655e3.5f2ab8"
            ]
        ]
    },
    {
        "id": "79da9006.ba2f5",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "cancel",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1350,
        "y": 1000,
        "wires": [
            [
                "a17655e3.5f2ab8"
            ]
        ]
    },
    {
        "id": "e3a13a28.5e7b68",
        "type": "link in",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "links": [
            "76faccd2.7c2824",
            "48c37a9b.aee8b4"
        ],
        "x": 560,
        "y": 300,
        "wires": [
            [
                "63ebb2fb.c780bc"
            ]
        ]
    },
    {
        "id": "76faccd2.7c2824",
        "type": "link out",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "links": [
            "e3a13a28.5e7b68"
        ],
        "x": 1855,
        "y": 860,
        "wires": []
    },
    {
        "id": "6d591598.406c5c",
        "type": "change",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "timeMessage",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 840,
        "wires": [
            [
                "76faccd2.7c2824"
            ]
        ]
    },
    {
        "id": "b111ba2b.a9ab08",
        "type": "link in",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "links": [
            "48c37a9b.aee8b4"
        ],
        "x": 1235,
        "y": 820,
        "wires": [
            [
                "4d63487d.74ae38"
            ]
        ]
    },
    {
        "id": "48c37a9b.aee8b4",
        "type": "link out",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "links": [
            "e3a13a28.5e7b68",
            "b111ba2b.a9ab08"
        ],
        "x": 975,
        "y": 580,
        "wires": []
    },
    {
        "id": "b39760f8.1681b",
        "type": "debug",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1310,
        "y": 280,
        "wires": []
    },
    {
        "id": "61caa82f.ea5278",
        "type": "switch",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "b39760f8.1681b"
            ]
        ]
    },
    {
        "id": "77c54779.bc6258",
        "type": "link out",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "links": [
            "df39b260.08ee5"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "df39b260.08ee5",
        "type": "link in",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "links": [
            "77c54779.bc6258"
        ],
        "x": 1095,
        "y": 320,
        "wires": [
            [
                "58d1e202.68f83c"
            ]
        ]
    },
    {
        "id": "58d1e202.68f83c",
        "type": "switch",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "answer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "8bc10ae7.075fa8"
            ]
        ]
    },
    {
        "id": "8bc10ae7.075fa8",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Store answer",
        "func": "const answers = global.get('answers') || {}\n\nconst sessionId = msg.sessionId\nconst questionIndex = msg.payload.questionIndex\nconst answer = msg.payload.answer\n\nconst sessionAnswers = answers[sessionId] || {}\n\nsessionAnswers[questionIndex] = answer\n\n// store back\nanswers[sessionId] = sessionAnswers\nglobal.set('answers', answers)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2c5cc44c.27401c",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "answers",
        "payloadType": "global",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 220,
        "y": 1240,
        "wires": [
            [
                "a8b0f11c.38663"
            ]
        ]
    },
    {
        "id": "b68d620a.79929",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Decorate answers with valid",
        "func": "const answers = msg.payload\nconst rightAnswers = msg.rightAnswers\n\nconst decoratedAnswers = {}\n\nfor (let [sessionId, sessionAnswers] of Object.entries(answers)) {\n    let decoratedSessionAnswers = {}\n    for (let [answerId, answer] of Object.entries(sessionAnswers)) {\n        decoratedSessionAnswers[answerId] = {\n            answer: answer,\n            rightAnswer: rightAnswers[answerId],\n            valid: rightAnswers[answerId] === answer\n        }\n    }\n    decoratedAnswers[sessionId] = decoratedSessionAnswers\n}\n\nmsg.payload = decoratedAnswers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 1240,
        "wires": [
            [
                "2fffff5e.72445"
            ]
        ]
    },
    {
        "id": "8fd9cfae.266be",
        "type": "template",
        "z": "a4c1dacb.0aa0d8",
        "name": "Quiz",
        "field": "payload",
        "fieldType": "msg",
        "format": "yaml",
        "syntax": "mustache",
        "template": "---\n-   question: Question?\n    prompts:\n        - Réponse A\n        - Réponse B\n        - Réponse C\n        - Réponse D\n    answer: 0\n-   question: De quelle couleur était le cheval blanc d'Henri 4?\n    prompts:\n        - Bleu\n        - Blanc\n        - Rouge\n        - Vert\n    answer: 1\n-   question: Combien font 2+2 ?\n    prompts:\n        - 1\n        - 12\n        - 4\n        - 3.14159265359\n    answer: 2",
        "output": "yaml",
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ccf28461.4b38b8"
            ]
        ]
    },
    {
        "id": "467aa19f.9e431",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "8fd9cfae.266be"
            ]
        ]
    },
    {
        "id": "343f237f.e248ec",
        "type": "change",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "quiz",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3f0c98e2.607398",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Get step from index",
        "func": "const steps = global.get('quiz')\nconst step = steps.map(({answer, ...rest}) => rest) // strips answer\n\nmsg.payload = step[msg.payload]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 580,
        "wires": [
            [
                "efd0c09f.0bc63"
            ]
        ]
    },
    {
        "id": "16f71894.88d6d7",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 540,
        "wires": [
            [
                "3f0c98e2.607398"
            ]
        ]
    },
    {
        "id": "eb976aca.bb9a18",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 580,
        "wires": [
            [
                "3f0c98e2.607398"
            ]
        ]
    },
    {
        "id": "e2c28816.4d9048",
        "type": "inject",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 620,
        "wires": [
            [
                "3f0c98e2.607398"
            ]
        ]
    },
    {
        "id": "70164c8c.3ebd14",
        "type": "debug",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 990,
        "y": 620,
        "wires": []
    },
    {
        "id": "a8b0f11c.38663",
        "type": "change",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rightAnswers",
                "pt": "msg",
                "to": "$globalContext('quiz').answer\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 1240,
        "wires": [
            [
                "b68d620a.79929"
            ]
        ]
    },
    {
        "id": "ccf28461.4b38b8",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Add index",
        "func": "msg.payload = msg.payload.map((step, index) => {\n    return {\n        ...step,\n        index: index\n    }\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 80,
        "wires": [
            [
                "343f237f.e248ec"
            ]
        ]
    },
    {
        "id": "2fffff5e.72445",
        "type": "function",
        "z": "a4c1dacb.0aa0d8",
        "name": "Compute score",
        "func": "\nconst pl = {}\n\n\nfor (const sessionId in msg.payload) {\n    const session = msg.payload[sessionId]\n    let score = 0\n    Object.entries(session).forEach(([index, step]) => {\n        if (step.valid) {\n            score++\n        }\n    })\n    pl[sessionId] = {score: score, answers: session}\n}\nmsg.payload = pl\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 1240,
        "wires": [
            [
                "57c78a42.196994"
            ]
        ]
    },
    {
        "id": "57c78a42.196994",
        "type": "debug",
        "z": "a4c1dacb.0aa0d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1190,
        "y": 1240,
        "wires": []
    }
]